// Code generated by "json-ice --type=OptimizerOutputJson"; DO NOT EDIT.

package main

import "github.com/moznion/go-json-ice/serializer"

func MarshalOptimizerOutputJsonAsJSON(s *OptimizerOutputJson) ([]byte, error) {
	buff := make([]byte, 1, 106)
	buff[0] = '{'
	if s.Actions == nil {
		buff = append(buff, "\"actions\":null,"...)
	} else {
		buff = append(buff, "\"actions\":"...)
		buff = append(buff, '[')
		for _, v := range s.Actions {
			if marshaled, err := v.MarshalJSON(); err != nil {
				return nil, err
			} else {
				buff = append(buff, marshaled...)
			}

			buff = append(buff, ',')
		}
		if buff[len(buff)-1] == ',' {
			buff[len(buff)-1] = ']'
		} else {
			buff = append(buff, ']')
		}

		buff = append(buff, ',')
	}
	buff = append(buff, "\"isOk\":"...)
	buff = serializer.AppendSerializedBool(buff, s.IsOk)
	buff = append(buff, ',')
	buff = append(buff, "\"errorMessage\":"...)
	buff = serializer.AppendSerializedString(buff, s.ErrorMessage)
	buff = append(buff, ',')
	if buff[len(buff)-1] == ',' {
		buff[len(buff)-1] = '}'
	} else {
		buff = append(buff, '}')
	}
	return buff, nil
}

func MarshalActionAsJSON(s *Action) ([]byte, error) {
	buff := make([]byte, 1, 80)
	buff[0] = '{'
	if s.ActionKeys == nil {
		buff = append(buff, "\"actionKeys\":null,"...)
	} else {
		buff = append(buff, "\"actionKeys\":"...)
		buff = append(buff, '[')
		for _, v := range s.ActionKeys {
			buff = serializer.AppendSerializedString(buff, v)
			buff = append(buff, ',')
		}
		if buff[len(buff)-1] == ',' {
			buff[len(buff)-1] = ']'
		} else {
			buff = append(buff, ']')
		}

		buff = append(buff, ',')
	}
	buff = append(buff, "\"actionName\":"...)
	buff = serializer.AppendSerializedString(buff, s.ActionName)
	buff = append(buff, ',')
	if buff[len(buff)-1] == ',' {
		buff[len(buff)-1] = '}'
	} else {
		buff = append(buff, '}')
	}
	return buff, nil
}
